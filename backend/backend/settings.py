"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from django.http import HttpResponse
from django.urls import path, include
from django.contrib import admin

def home_view(request):
    return HttpResponse("¬°CreditoSys API est√° funcionando!".encode("utf-8"))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-1_6qeml-lhvggk8s-h6yb9lnso0-oz8!eo794_00sxx')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Cambiar a False para emails reales

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',                  # A√±adir esta l√≠nea
    'rest_framework_simplejwt',        # A√±adir esta l√≠nea
    'corsheaders',                     # ¬°Importante para el frontend!
    'users',                           # Crearemos esta app m√°s adelante
    'applications'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'creditosys_db'),
        'USER': os.environ.get('DB_USER', 'creditosys_user'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'DiscJockey001'),
        'HOST': os.environ.get('DB_HOST', 'db'), # ¬°Importante! 'db' es el nombre del servicio en docker-compose
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User' 

# CreditoSys/backend/backend/settings.py

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', # Autenticaci√≥n por JWT
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Por defecto, requiere autenticaci√≥n
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),   # Tiempo de vida del token de acceso
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),      # Tiempo de vida del token de refresco
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Utiliza la SECRET_KEY de Django
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8001", # Si tu frontend se ejecuta en un servidor web local en este puerto
    "http://127.0.0.1:8001", # Otra posible IP local
    "http://localhost:8000", # Backend local
    "http://127.0.0.1:8000", # Backend local
    "http://localhost:3000", # Puerto com√∫n para desarrollo
    "http://127.0.0.1:3000", # Puerto com√∫n para desarrollo
    "http://localhost:5000", # Puerto com√∫n para desarrollo
    "http://127.0.0.1:5000", # Puerto com√∫n para desarrollo
    "http://localhost:8080", # Puerto com√∫n para desarrollo
    "http://127.0.0.1:8080", # Puerto com√∫n para desarrollo
    "http://localhost", # Sin puerto espec√≠fico
    "http://127.0.0.1", # Sin puerto espec√≠fico
    # Agrega aqu√≠ la URL de tu frontend cuando est√© desplegado
    # "https://www.tucreditosys.com",
]

# Configuraci√≥n adicional de CORS para desarrollo
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # Solo para desarrollo

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') 

# Configuraci√≥n de Email para Alertas
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'iyouok10@gmail.com'  # Tu email real

EMAIL_HOST_PASSWORD = 'zonj zqcp zdwk hayg'  # üîë REEMPLAZAR CON TU CONTRASE√ëA DE APLICACI√ìN
DEFAULT_FROM_EMAIL = 'CreditoSys <iyouok10@gmail.com>'

# Para desarrollo, usar backend de consola (no env√≠a emails reales)
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("‚ö†Ô∏è  MODO DESARROLLO: Los emails se mostrar√°n en la consola")
    print("üìß Para emails reales:")
    print("   1. Cambia DEBUG = False en settings.py")
    print("   2. Reemplaza 'tu-password-app' con tu contrase√±a de aplicaci√≥n de Gmail")
    print("   3. Reinicia el servidor con: docker-compose restart backend") 